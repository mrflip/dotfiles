
function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(branch: \1)/'
}

if `perl -e "'$MACHTYPE'=~/apple/ or exit(1)"`; then
  function psgrep()
  {
    /bin/ps -Awwwc -o 'pid,time,ruser,start,command' | grep -i $1 | grep -iv grep
  }
  function ps()
  {
    # -c for no command line
    if [ "$*" == "" ] ; then
      /bin/ps x -Awww -o 'pid,time,ruser,start,command'
    else
      /bin/ps "$@"
    fi
  }
  function rmdir {
    rmdir_flags=""
    for foo in "$@" ; do
      if [[ "$foo" =~ "-"       ]] ; then rmdir_flags="$rmdir_flags $foo" ; continue ; fi
      if [[ -f "$foo"/.DS_Store ]] ; then rm "$foo"/.DS_Store ; fi
      # echo "mkdir rmdir_flags $rmdir_flags arg '$foo'"
      `which rmdir` $rmdir_flags "$foo"
    done
  }

else
  # not apple
  function psgrep()
  {
    /bin/ps -Awww -o 'pid,time,ruser,start,command' | grep -i $1 | grep -iv grep
  }
  function ps()
  {
        # -c for no command line
    if [ "$*" == "" ] ; then
      /bin/ps x -Awww -o 'pid,time,ruser,start,comm' k uid,comm
    else
      /bin/ps "$@"
    fi
  }
fi

function histgrep()
{
    egrep -hi -- "$@" ~/.history-bash/hist-* | ruby -rset -e 'lines=Set.new; $stdin.each{|l| next if lines.include?(l.hash) ; puts l ; lines << l.hash}'
}
alias hs=histgrep

function histsave()
{
    history -w
    echo "Saved History."
}

# archive_history()
# {
#     HISTORYOLD=${HISTFILE}.archive
#     CURTIME=`date`
#     CURTTY=`tty`
#     if  [ x$HISTDUMPPED = x ]; then
#       echo "#-${HOSTNAME}-- ${CURBASHDATE} - ${CURTIME} ($CURTTY) ----" >>   $HISTORYOLD
#       history $(($HISTCMD-${CURBASHSTART-0})) | sed -e 's/^[ ]*[0-9][0-9]* [ ]*//g'  >> $HISTORYOLD
#       export HISTDUMPPED=1
#     fi
# }
#
# exit ()
# {
#    archive_history
#    builtin exit
# }
#
#trap 'archive_history' EXIT
#

function bind_showall()
{
    ( bind -p | perl -ne 'chomp;
        if (m/^(.+): (.*)$/) {
                ($key,$cmd)=("$1:",$2);
        } else {
                ($key,$cmd)=("",$_);
        };
        printf "%10s\t%s\n", $key, $cmd;
    ' ) | sort -t':' -k 2
}


function bind_grep()
{
    ( bind -p | perl -ne 'chomp;
        if (m/^(.+): (.*)$/) {
                ($key,$cmd)=("$1:",$2);
        } else {
                ($key,$cmd)=("",$_);
        };
        printf "%10s\t%s\n", $key, $cmd;
    ' ) | grep -Pi -- "$1" | sort -t':' -k 2
}

function bind_showfuncs()
{
    bind -P | perl -ne 'chomp;
        next unless $_;
        m/^(.*) is not bound to any keys/ && do { ($cmd,$keys)=($1,"") };
        m/^(.*) can be found on (.*)$/    && do { ($cmd,$keys)=($1,$2) };
        $keys =~ s/\.$//;
        printf "%-40s: %s\n", ($cmd || "!!$_!!"), join "\t", (split ", ", $keys);
    '
}

function status() { st=$? ; echo $st ; perl -e "exit($st)" ;  }

# function svn() {
#     if [[ "$1" == 'status' ]] ; then
#         `which svn` --ignore-externals "$@"
#     else
#         `which svn` "$@"
#     fi
# }

function sshkp() {
  _host=$1                   ; shift
  _keypair=${kp-gibbon}
  _keypair=${keypair-gibbon}
  _as_user=${as_user-ubuntu}
  echo $_host $_keypair $_as_user "$@"
  if [[ "$_host" == "" ]] ; then echo "which host?"
  else ssh -i ~/.hadoop-ec2/keypairs/${_keypair}.pem ${_as_user}@${_host} "$@" ; fi
  unset _host _as_user _keypair
}

function forget_host() {
  perl -pi -e "s/.*${1}.*//g" ~/.ssh/known_hosts
  rm ~/.ssh/known_hosts.old > /dev/null 2>&1
}
